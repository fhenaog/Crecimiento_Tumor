function [pOpt,Info] = EstimacionSdo(p,TestPRBS,TestSTEP)
%PARAMETERESTIMATION_MODELO_SDO
%
% Solve a parameter estimation problem for the modelo_sdo model.
%
% The function returns estimated parameter values, pOpt,
% and estimation termination information, Info.
%
% The input argument, p, defines the model parameters to estimate,
% if omitted the parameters specified in the function body are estimated.
%
% Modify the function to include or exclude new experiments, or
% to change the estimation options.
%
% Auto-generated by SPETOOL on 18-Oct-2023 20:10:01.
%

%% Open the model.
open_system('modelo_sdo')

%% Specify Model Parameters to Estimate
%
if nargin < 1 || isempty(p)
    p = sdo.getParameterFromModel('modelo_sdo',{'alpha','c3','a1','a2','a3','b1','c1','c2','c4','d1','d2','r1','r2','rho','s'});
    p(1).Minimum = 0;
    p(1).Maximum = 1;
    p(1).Scale = 1;
    p(2).Minimum = 0;
    p(2).Maximum = 1.2;
    p(3).Minimum = 0;
    p(3).Maximum = 0.5;
    p(3).Scale = 1;
    p(4).Minimum = 0;
    p(4).Maximum = 0.5;
    p(4).Scale = 1;
    p(5).Minimum = 0;
    p(5).Maximum = 0.5;
    p(5).Scale = 1;
    p(6).Minimum = 0;
    p(6).Maximum = 1.2;
    p(7).Minimum = 0;
    p(7).Maximum = 1.2;
    p(8).Minimum = 0;
    p(8).Maximum = 1.2;
    p(9).Minimum = 0;
    p(9).Maximum = 1.2;
    p(10).Minimum = 0;
    p(10).Maximum = 1;
    p(10).Scale = 1;
    p(11).Minimum = 0;
    p(11).Maximum = 1.1;
    p(12).Minimum = 0;
    p(12).Maximum = 2;
    p(12).Scale = 1;
    p(13).Minimum = 0;
    p(13).Maximum = 2;
    p(13).Scale = 1;
    p(14).Minimum = 0;
    p(14).Maximum = 0.2;
    p(14).Scale = 1;
    p(15).Minimum = 0;
    p(15).Maximum = 0.5;
    p(15).Scale = 1;
end

%% Define the Estimation Experiments
%

PRBS = sdo.Experiment('modelo_sdo');

%%
% Specify the experiment input data used to generate the output.
PRBS_Sig_Input = Simulink.SimulationData.Signal;
PRBS_Sig_Input.Values    = getData('PRBS_Sig_Input_Value');
PRBS_Sig_Input.BlockPath = 'modelo_sdo/Input';
PRBS_Sig_Input.PortType  = 'outport';
PRBS_Sig_Input.PortIndex = 1;
PRBS_Sig_Input.Name      = 'Input';
PRBS.InputData = PRBS_Sig_Input;

%%
% Specify the measured experiment output data.
PRBS_Sig_Output = Simulink.SimulationData.Signal;
PRBS_Sig_Output.Values    = getData('PRBS_Sig_Output_Value',TestPRBS);
PRBS_Sig_Output.BlockPath = 'modelo_sdo/Subsystem2';
PRBS_Sig_Output.PortType  = 'outport';
PRBS_Sig_Output.PortIndex = 2;
PRBS_Sig_Output.Name      = 'Celulas Cancerigenas';
PRBS.OutputData = PRBS_Sig_Output;

STEP = sdo.Experiment('modelo_sdo');

%%
% Specify the experiment input data used to generate the output.
STEP_Sig_Input = Simulink.SimulationData.Signal;
STEP_Sig_Input.Values    = getData('STEP_Sig_Input_Value');
STEP_Sig_Input.BlockPath = 'modelo_sdo/Input';
STEP_Sig_Input.PortType  = 'outport';
STEP_Sig_Input.PortIndex = 1;
STEP_Sig_Input.Name      = 'Input';
STEP.InputData = STEP_Sig_Input;

%%
% Specify the measured experiment output data.
STEP_Sig_Output = Simulink.SimulationData.Signal;
STEP_Sig_Output.Values    = getData('STEP_Sig_Output_Value',TestSTEP);
STEP_Sig_Output.BlockPath = 'modelo_sdo/Subsystem2';
STEP_Sig_Output.PortType  = 'outport';
STEP_Sig_Output.PortIndex = 2;
STEP_Sig_Output.Name      = 'Celulas Cancerigenas';
STEP.OutputData = STEP_Sig_Output;

%%
% Group the experiments into a vector.
Exp = [PRBS; STEP];

%%
% Create a model simulator from an experiment
Simulator = createSimulator(Exp(1));
for ct = 2:numel(Exp)
    Simulator = createSimulator(Exp(ct),Simulator);
end

%% Create Estimation Objective Function
%
% Create a function that is called at each optimization iteration
% to compute the estimation cost.
%
% Use an anonymous function with one argument that calls modelo_sdo_optFcn.
optimfcn = @(P) modelo_sdo_optFcn(P,Simulator,Exp);

%% Optimization Options
%
% Specify optimization options.
Options = sdo.OptimizeOptions;
Options.Method = 'lsqnonlin';
Options.MethodOptions.FunctionTolerance = 1e-07;
Options.MethodOptions.StepTolerance = 0.0001;
Options.OptimizedModel = Simulator;
Options.UseParallel = 1;
Options.ParallelFileDependencies = getData('Options_ParallelFileDependencies');
Options.ParallelFileDependencies{end+1} = mfilename('fullpath');

%% Estimate the Parameters
%
% Call sdo.optimize with the estimation objective function handle,
% parameters to estimate, and options.
[pOpt,Info] = sdo.optimize(optimfcn,p,Options);

%%
% Update the experiments with the estimated parameter values.
Exp = setEstimatedValues(Exp,pOpt);

%% Update Model
%
% Update the model with the optimized parameter values.
sdo.setValueInModel('modelo_sdo',pOpt);
end

function Vals = modelo_sdo_optFcn(P,Simulator,Exp)
%MODELO_SDO_OPTFCN
%
% Function called at each iteration of the estimation problem.
%
% The function is called with a set of parameter values, P, and returns
% the estimation cost, Vals, to the optimization solver.
%
% See the sdoExampleCostFunction function and sdo.optimize for a more
% detailed description of the function signature.
%

%%
% Define a signal tracking requirement to compute how well the model
% output matches the experiment data.
r = sdo.requirements.SignalTracking(...
    'Method', 'Residuals');
%%
% Update the experiment(s) with the estimated parameter values.
Exp = setEstimatedValues(Exp,P);

%%
% Simulate the model and compare model outputs with measured experiment
% data.

F_r = [];
for ct=1:numel(Exp)
    Simulator = createSimulator(Exp(ct),Simulator);
    strOT = mat2str(Exp(ct).OutputData(1).Values.Time);
    Simulator = sim(Simulator, 'OutputOption', 'AdditionalOutputTimes', 'OutputTimes', strOT);

    SimLog = find(Simulator.LoggedData,get_param('modelo_sdo','SignalLoggingName'));
    Sig = find(SimLog,Exp(ct).OutputData.Name);

    Error = evalRequirement(r,Sig.Values,Exp(ct).OutputData.Values);
    F_r = [F_r; Error(:)];
end

%% Return Values.
%
% Return the evaluated estimation cost in a structure to the
% optimization solver.
Vals.F = F_r;
end

function Data = getData(DataID,Test)
%GETDATA
%
% Helper function to store data used by parameterEstimation_modelo_sdo.
%
% The input, DataID, specifies the name of the data to retrieve. The output,
% Data, contains the requested data.
%
 if ~exist('Test','var')
     % third parameter does not exist, so default it to something
      Test = [];
 end
switch DataID
    case 'PRBS_Sig_Input_Value'
        t = [0; 9; 18; 27; 36; 45; 54; 63; 72; 81; 90; 99; 108; 117; 126; 135; 144;  ...
            153; 162; 171; 180; 189; 198; 207; 216; 225; 234; 243; 252; 261; 270; 279;  ...
            288; 297; 306; 315; 324; 333; 342; 351; 360; 369; 378; 387; 396; 405; 414;  ...
            423; 432; 441; 450; 459; 468; 477; 486; 495; 504; 513; 522; 531; 540; 549;  ...
            558; 567; 576; 585; 594; 603; 612; 621; 630; 639; 648; 657; 666; 675; 684;  ...
            693; 702; 711; 720; 729; 738; 747; 756; 765; 774; 783; 792; 801; 810; 819;  ...
            828; 837; 846; 855; 864; 873; 882; 891; 900];
        y = [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0.2; 0.2; 0.2; 0; 0; 0; 0.2; 0.2; 0.2; 0;  ...
            0.2; 0.2; 0; 0; 0; 0.2; 0; 0; 0.2; 0.2; 0; 0.2; 0; 0.2; 0; 0; 0; 0.2; 0;  ...
            0; 0; 0; 0.2; 0; 0.2; 0; 0.2; 0.2; 0.2; 0; 0; 0; 0; 0.2; 0; 0.2; 0.2; 0;  ...
            0.2; 0; 0.2; 0; 0.2; 0.2; 0.2; 0.2; 0.2; 0; 0.2; 0; 0; 0; 0; 0; 0; 0; 0;  ...
            0.2; 0; 0.2; 0; 0.2; 0; 0.2; 0; 0.2; 0; 0; 0; 0; 0.2; 0; 0.2; 0.2; 0.2;  ...
            0.2; 0; 0; 0; 0.2; 0];
        Data = timeseries(y,t);
    case 'PRBS_Sig_Output_Value'
        t = [0; 9; 18; 27; 36; 45; 54; 63; 72; 81; 90; 99; 108; 117; 126; 135; 144;  ...
            153; 162; 171; 180; 189; 198; 207; 216; 225; 234; 243; 252; 261; 270; 279;  ...
            288; 297; 306; 315; 324; 333; 342; 351; 360; 369; 378; 387; 396; 405; 414;  ...
            423; 432; 441; 450; 459; 468; 477; 486; 495; 504; 513; 522; 531; 540; 549;  ...
            558; 567; 576; 585; 594; 603; 612; 621; 630; 639; 648; 657; 666; 675; 684;  ...
            693; 702; 711; 720; 729; 738; 747; 756; 765; 774; 783; 792; 801; 810; 819;  ...
            828; 837; 846; 855; 864; 873; 882; 891; 900];
        y = Test;
        Data = timeseries(y,t);
    case 'STEP_Sig_Input_Value'
        t = [0; 9; 18; 27; 36; 45; 54; 63; 72; 81; 90; 99; 108; 117; 126; 135; 144;  ...
            153; 162; 171; 180; 189; 198; 207; 216; 225; 234; 243; 252; 261; 270; 279;  ...
            288; 297; 306; 315; 324; 333; 342; 351; 360; 369; 378; 387; 396; 405; 414;  ...
            423; 432; 441; 450; 459; 468; 477; 486; 495; 504; 513; 522; 531; 540; 549;  ...
            558; 567; 576; 585; 594; 603; 612; 621; 630; 639; 648; 657; 666; 675; 684;  ...
            693; 702; 711; 720; 729; 738; 747; 756; 765; 774; 783; 792; 801; 810; 819;  ...
            828; 837; 846; 855; 864; 873; 882; 891; 900];
        y = [0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2;  ...
            0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2;  ...
            0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2;  ...
            0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2;  ...
            0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2;  ...
            0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2;  ...
            0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2; 0.2];
        Data = timeseries(y,t);
    case 'STEP_Sig_Output_Value'
        t = [0; 9; 18; 27; 36; 45; 54; 63; 72; 81; 90; 99; 108; 117; 126; 135; 144;  ...
            153; 162; 171; 180; 189; 198; 207; 216; 225; 234; 243; 252; 261; 270; 279;  ...
            288; 297; 306; 315; 324; 333; 342; 351; 360; 369; 378; 387; 396; 405; 414;  ...
            423; 432; 441; 450; 459; 468; 477; 486; 495; 504; 513; 522; 531; 540; 549;  ...
            558; 567; 576; 585; 594; 603; 612; 621; 630; 639; 648; 657; 666; 675; 684;  ...
            693; 702; 711; 720; 729; 738; 747; 756; 765; 774; 783; 792; 801; 810; 819;  ...
            828; 837; 846; 855; 864; 873; 882; 891; 900];
        y = Test;
        Data = timeseries(y,t);
    case 'Options_ParallelFileDependencies'
        Data = {'C:/Users/pipeh/OneDrive/Documents/Eafit/7mo semestre/Modelacion Experimental/Practica 2/modelo_sdo.slx';  ...
            'C:/Users/pipeh/OneDrive/Documents/Eafit/7mo semestre/Modelacion Experimental/Practica 2/modelo_sdo.slxc'};
end
end
